การใช้งานฟังก์ชันและประเภทข้อมูลทั่วไป (generic functions and types) 
ในภาษา Go โดยใช้ตัวอย่างเพื่อทำความเข้าใจแนวคิดเหล่านี้:

1. ตัวอย่างฟังก์ชันทั่วไป (Generic Function)
ฟังก์ชัน SlicesIndex: ฟังก์ชันนี้รับพารามิเตอร์เป็นสไลซ์ (slice) 
ของชนิดข้อมูลที่สามารถเปรียบเทียบได้ (comparable type) 
และรับค่าที่เป็นสมาชิกของชนิดข้อมูลนั้น จากนั้นจะคืนค่าเป็น
ดัชนี (index) ของการเกิดขึ้นครั้งแรกของค่าที่กำหนดในสไลซ์ 
หากไม่พบจะคืนค่าเป็น -1

ข้อจำกัดของชนิดข้อมูล (Comparable Constraint):
ข้อจำกัดนี้หมายความว่าเราสามารถใช้ตัวดำเนินการ == และ != ใน
การเปรียบเทียบค่าของชนิดข้อมูลนี้ได้

ฟังก์ชันในไลบรารีมาตรฐาน:
ฟังก์ชันนี้มีอยู่ในไลบรารีมาตรฐานของ Go ในชื่อ slices.Index

2. ตัวอย่างประเภทข้อมูลทั่วไป (Generic Type)
ประเภท List:
List ในตัวอย่างนี้เป็นลิสต์เชื่อมโยงเดี่ยว (singly-linked list) 
ที่สามารถเก็บค่าของชนิดข้อมูลใดก็ได้

การกำหนดฟังก์ชันให้กับประเภททั่วไป:
เราสามารถกำหนด
ฟังก์ชันสำหรับประเภททั่วไปได้เหมือนกับที่ทำกับประเภทข้อมูล
ปกติ แต่ต้องใส่พารามิเตอร์ชนิดข้อมูลทั่วไปไว้เสมอ ชื่อประเภท
จะเป็น List[T] ไม่ใช่ List

ฟังก์ชัน AllElements: 
ฟังก์ชันนี้จะคืนค่าทุกสมาชิกในลิสต์เป็น
สไลซ์ ในตัวอย่างต่อไปจะมีการแสดงวิธีที่สอดคล้องกับแนว
ปฏิบัติในการวนลูปผ่านสมาชิกทั้งหมดของประเภทข้อมูลที่กำหนดเอง

3. การใช้ฟังก์ชันทั่วไป
การอนุมานชนิดข้อมูล (Type Inference):
เมื่อเรียกใช้ฟังก์ชัน
ทั่วไป เรามักจะพึ่งพาการอนุมานชนิดข้อมูลจากคอมไพเลอร์ได้ 
ตัวอย่างเช่น เมื่อเรียกใช้ฟังก์ชัน SlicesIndex เราไม่จำเป็น
ต้องระบุชนิดข้อมูลสำหรับ S และ E เพราะคอมไพเลอร์จะ
อนุมานให้โดยอัตโนมัติ แต่เราก็สามารถระบุชนิดข้อมูลเองได้เช่น
กันหากต้องการ

บทความนี้ช่วยให้เราเข้าใจแนวคิดของ generic functions 
และ generic types ใน Go ซึ่งช่วยเพิ่มความยืดหยุ่นและความสามารถใน
การนำโค้ดไปใช้ซ้ำในโปรแกรมได้มากขึ้น.