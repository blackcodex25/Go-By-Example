1.Go รองรับการเข้ารหัสและถอดรหัส JSON ได้ในตัว:
Go มีฟังก์ชันสำหรับแปลงข้อมูลไปและกลับจากรูปแบบ JSON 
โดยรองรับทั้งชนิดข้อมูลพื้นฐานและโครงสร้างข้อมูลที่สร้างขึ้นเอง (custom types)

2.เฉพาะฟิลด์ที่ถูกส่งออกจะถูกเข้ารหัสหรือถอดรหัสใน JSON:
ฟิลด์ (field) ที่จะใช้ใน JSON ต้องขึ้นต้นด้วยตัวอักษรตัวใหญ่ (เป็นฟิลด์ที่ส่งออกได้)
เพื่อให้สามารถเข้ารหัส (encode) และถอดรหัส (decode) เป็น JSON ได้

3.การเข้ารหัสข้อมูลพื้นฐานไปเป็น JSON:
สำหรับข้อมูลชนิดพื้นฐาน เช่น ตัวเลขและสตริง การแปลงไปเป็น JSON จะตรงไปตรงมา

4.การเข้ารหัส slice และ map เป็น JSON:
Slice จะถูกแปลงเป็น JSON array (ชุดของข้อมูลหลายค่า)
และ map จะถูกแปลงเป็น JSON object (คู่ของคีย์และค่า)

5.การเข้ารหัสโครงสร้างข้อมูลที่สร้างขึ้นเอง (custom types):
Go สามารถแปลงโครงสร้างข้อมูลที่สร้างขึ้นเองไปเป็น JSON ได้
และจะใช้ชื่อฟิลด์เป็นคีย์ใน JSON โดยค่าเริ่มต้น

6.การใช้ tags เพื่อกำหนดคีย์ของ JSON:
สามารถใช้ "tags" ในการระบุชื่อคีย์ JSON ที่ต้องการ โดย
กำหนดไว้หลังฟิลด์ของ struct เช่น json:"custom_name"

7.การถอดรหัสข้อมูล JSON กลับเป็นค่าใน Go:
เมื่อถอดรหัส JSON จำเป็นต้องมีตัวแปรเพื่อเก็บข้อมูลที่ถอดรหัส
ซึ่งอาจเป็น map แบบ map[string]interface{} 
เพื่อเก็บข้อมูลที่ไม่แน่นอนหลายชนิด

8.การแปลงข้อมูลหลังการถอดรหัส:
ข้อมูลใน JSON ที่ถอดรหัสจะต้องถูกแปลงให้เป็นชนิด
ข้อมูลที่เหมาะสมใน Go เช่น การแปลงตัวเลขไปเป็น float64

9.การเข้าถึงข้อมูลที่ซ้อนกัน:
ถ้ามีข้อมูลใน JSON ที่ซ้อนกันหลายระดับ ต้องทำการ
แปลงข้อมูลทีละขั้นตอนเพื่อเข้าถึงข้อมูลนั้น

10.การถอดรหัส JSON เป็นโครงสร้างข้อมูลที่กำหนดเอง:
การถอดรหัส JSON ลงในโครงสร้างข้อมูลที่สร้างเองจะ
เพิ่มความปลอดภัยในด้านชนิดข้อมูลและ
ลดการต้องใช้การแปลงชนิด (type assertion)

11.การใช้ JSON กับ os.Writer:
JSON สามารถถูกสตรีมไปยัง os.Writer เช่น os.Stdout
หรือ body ของการตอบสนอง HTTP โดยตรงได้ ไม่จำเป็น
ต้องแปลงเป็น bytes หรือ strings ก่อน

