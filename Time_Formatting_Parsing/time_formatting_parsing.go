package main

import (
	"fmt"
	"time" // ใช้สำหรับการทำงานกับเวลาและวันที่ในภาษา Go
)

func main() {
	p := fmt.Println // ตัวแปร p เป็นการย่อคำสั่ง fmt.Println เพื่อให้เรียกใช้ได้สะดวก
	f := fmt.Printf  // ตัวแปร f เป็นการย่อคำสั่ง fmt.Printf เพื่อให้เรียกใช้ได้สะดวก

	t := time.Now()           // ตัวแปร t ให้เก็บคำนวณเวลาปัจจุบัน
	p(t.Format(time.RFC3339)) // แสดงเวลาปัจจุบัน ในรูปแบบ RFC3339

	// Parse เปลี่ยนรูปแบบของเวลา
	// ตัวแปร t1 ให้เก็บคำนวณเวลาปัจจุบัน ในรูปแบบ RFC3339
	// แล้วตรวจสอบว่าสามารถแปลงได้หรือไม่
	t1, e := time.Parse(
		time.RFC3339,
		"2012-11-01T22:08:41+00:00")
	p(t1) // ถ้าสามารถแปลงได้ให้แสดงคำนวณเวลาปัจจุบัน

	p(t.Format("3:04PM"))                           // จัดรูปแบบเวลาปัจจุบันเป็นเวลาในรูปแบบ "3:04PM"
	p(t.Format("Mon Jan _2 15:04:05 2006"))         // จัดรูปแบบเวลาปัจจุบันเป็น "Mon Jan _2 15:04:05 2006"
	p(t.Format("2006-01-02T15:04:05.999999-07:00")) // จัดรูปแบบเวลาปัจจุบันเป็น ISO 8601 รูปแบบละเอียด
	form := "3 04 PM"                               // ตัวแปร form ให้เก็บคำนวณเวลาปัจจุบัน ในรูปแบบ 3 04 PM
	t2, e := time.Parse(form, "8 41 PM")            // ตัวแปร t2 ให้เก็บคำนวณเวลาปัจจุบัน ในรูปแบบ 8 41 PM
	p(t2)                                           // ถ้าสามารถแปลงได้ให้แสดงคำนวณเวลาปัจจุบัน

	f("%d-%02d-%02dT%02d:%02d:%02d-00:00\n", // แสดงเวลาปัจจุบัน ในรูปแบบ 2006-01-02T15:04:05-00:00
		t.Year(), t.Month(), t.Day(), // แสดงเวลาปัจจุบัน ในรูปแบบ 2006-01-02
		t.Hour(), t.Minute(), t.Second()) // แสดงเวลาปัจจุบัน ในรูปแบบ 15:04:05

	// ตัวแปร ansic ให้เก็บคำนวณเวลาปัจจุบัน ในรูปแบบ Mon Jan _2 15:04:05 2006
	ansic := "Mon Jan _2 15:04:05 2006"
	_, e = time.Parse(ansic, "8:41PM") // วิเคราะห์เวลาตามรูปแบบที่กำหนดไว้ แต่ไม่มีข้อมูลปี เดือน วันที่
	p(e)                               // พิมพ์ข้อผิดพลาดเพราะไม่มีข้อมูลปี เดือน วันที่
}

/* อธิบายโค้ด
1.การจัดรูปแบบเวลา:
t.Format(time.RFC3339): จัดรูปแบบเวลาปัจจุบันตามมาตรฐาน RFC3339 (ISO 8601)
t.Format("3:04PM"): จัดรูปแบบเป็นเวลาตามรูปแบบที่กำหนด โดยใช้ตัวเลข 12 ชั่วโมงและ AM/PM
t.Format("Mon Jan _2 15:04:05 2006"): จัดรูปแบบเป็นวันของสัปดาห์,
เดือน, วันที่, เวลา, นาที, วินาที และปีในรูปแบบที่กำหนด
t.Format("2006-01-02T15:04:05.999999-07:00"): จัดรูปแบบเป็นเวลาที่ละเอียดถึงไมโครวินาที
ตาม ISO 8601

2.การวิเคราะห์เวลา:
t1, e := time.Parse(time.RFC3339, "2012-11-01T22:08:41+00:00"):
วิเคราะห์สตริงเวลาในรูปแบบ RFC3339

time.Parse("3 04 PM", "8 41 PM"): วิเคราะห์เวลาตามรูปแบบที่กำหนดเอง
(ตัวเลข 12 ชั่วโมง, นาที, AM/PM)

time.Parse("Mon Jan _2 15:04:05 2006", "8:41PM"):
พยายามวิเคราะห์เวลาในรูปแบบที่กำหนด แต่จะเกิดข้อผิดพลาด
เนื่องจากรูปแบบที่ระบุไม่ตรงกับรูปแบบที่กำหนดไว้ (ไม่มีข้อมูลปี เดือน วันที่)

3.ข้อผิดพลาด:
หากรูปแบบการวิเคราะห์ไม่ตรงกับรูปแบบที่กำหนดจะส่ง คืนข้อผิดพลาด ซึ่งจะถูกพิมพ์ออกมาในบางกรณี
*/
/* ข้อควรระวัง
การจัดรูปแบบและการวิเคราะห์: รูปแบบที่ใช้ในการจัดรูปแบบและการวิเคราะห์
จะต้องตรงตามรูปแบบที่กำหนด ตัวอย่างเช่น time.Format และ time.Parse
ต้องตรงตามตัวอย่างที่กำหนดไว้
การจัดการข้อผิดพลาด: ควรตรวจสอบข้อผิดพลาดเมื่อใช้ time.Parse
เพื่อให้แน่ใจว่าข้อมูลที่วิเคราะห์นั้นถูกต้อง
*/
/* สรุป
โค้ดนี้จะแสดงวิธีการใช้ฟังก์ชันต่าง ๆ ของแพ็กเกจ time เพื่อจัดรูปแบบและวิเคราะห์เวลา
ในรูปแบบที่หลากหลาย รวมถึงการจัดการข้อผิดพลาด ที่เกิดขึ้นจากการวิเคราะห์ข้อมูลที่ไม่ถูกต้อง
*/
