การทำงานกับไดเร็กทอรี (Directories) ใน Go มีฟังก์ชันที่มีประโยชน์หลาย
อย่างเพื่อจัดการกับไดเร็กทอรีในระบบไฟล์ (file system) โดยตรง ซึ่งหลักๆ
มีดังนี้:
1.การสร้างไดเร็กทอรีใหม่
สามารถสร้างไดเร็กทอรีย่อยใหม่ได้โดยใช้ os.Mkdir ซึ่งจะสร้างไดเร็กทอรีใหม่ใน
ไดเร็กทอรีที่ทำงานอยู่ปัจจุบัน
ฟังก์ชันนี้ช่วยให้สามารถจัดการโครงสร้างของไฟล์ได้โดย
ไม่ต้องทำงานกับระบบไฟล์โดยตรง

2.การลบไดเร็กทอรีชั่วคราว
เมื่อสร้างไดเร็กทอรีชั่วคราว (temporary directories) ในโค้ด
ควรใช้คำสั่ง defer พร้อมกับ os.RemoveAll เพื่อลบไดเร็กทอรีและทุกสิ่งที่อยู่
ภายในเมื่อโปรแกรมสิ้นสุดการทำงาน ฟังก์ชันนี้ทำงานคล้ายกับคำสั่ง rm -rf ใน
ระบบ UNIX ที่ลบไดเร็กทอรีทั้งหมดแบบ Recusive

3.ฟังก์ชันช่วยในการสร้างไฟล์ว่างใหม่
สามารถใช้ฟังก์ชันช่วยในการสร้างไฟล์ว่างโดยใช้ os.WriteFile
เพื่อเขียนข้อมูลลงในไฟล์ได้ง่ายๆ

4.การสร้างโครงสร้างไดเร็กทอรีแบบลำดับชั้น
ใช้ os.MkdirAll ในการสร้างโครงสร้างไดเร็กทอรีแบบลำดับชั้น
(เช่น subdirectories และ parent directories)
โดยไม่จำเป็นต้องสร้างทีละขั้น เช่นเดียวกับการใช้คำสั่ง Mkdir -p ในคำสั่ง Linux

5.การแสดงรายการเนื้อหาในไดเร็กทอรี
ฟังก์ชัน os.ReadDir ใช้ในการแสดงรายการไฟล์และไดเร็กทอรีทั้งหมด
ภายในไดเร็กทอรีที่ระบุ โดยจะคืนค่าเป็น slice ของ os.DirEntry
ซึ่งสามารถนำไปตรวจสอบและแสดงผลได้

6.การเปลี่ยนไดเร็กทอรีปัจจุบัน (cd)
การเปลี่ยนไดเร็กทอรีที่ทำงานอยู่สามารถทำได้โดยใช้ os.Chdir คล้ายกับการ
ใช้คำสั่ง cd บนคอมมานด์ไลน์

7.การตรวจสอบเนื้อหาไดเร็กทอรีย่อย
สามารถใช้ fliepath.WalkDir ในการเยี่ยมชมทุกไฟล์
และไดเร็กทอรีย่อย (sub-directories) ในไดเร็กทอรีที่ระบุ
โดยฟังก์ชันนี้จะทำงานแบบ recursive และเรียก callback
function ทุกครั้งที่พบไฟล์หรือไดเร็กทอรี

8.การใช้งานฟังก์ชัน Visit สำหรับเดินทางในไดเร็กทอรี
visit เป็นฟังก์ชัน callback ที่ถูกเรียกทุกครั้งที่ WalkDir
พบไฟล์หรือไดเร็กทอรีในเส้นทางที่กำหนดไว้ ผู้เขียนโปรแกรมสามารถใช้
ฟังก์ชันนี้ในการตรวจสอบหรือนำข้อมูลไปประมวลผลเพิ่มเติม

การทำงานทั้งหมดนี้ช่วยให้เราสามารถจัดการไดเร็กทอรีใน Go
ได้อย่างมีประสิทธิภาพและมีความยืดหยุ่นมาก