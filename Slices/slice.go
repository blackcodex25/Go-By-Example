package main

import (
	f "fmt"
	"slices"
)

func main() {
	// การประกาศ Slice และการตรวจสอบค่าเริ่มต้น
	var s []string // ประกาศ slice ของ string ชื่อ s
	// พิมพ์ว่า s ยังไม่ถูกกำหนดค่า(nil) และความยาวของมันเป็น 0
	f.Println("uninit:", s, s == nil, len(s) == 0)

	// การสร้าง Slice ด้วย make
	s = make([]string, 3) // สร้าง slice ที่มีความยาว 3 โดยค่าเริ่มต้นใน slice คือ "" (ค่าเริ่มต้นของ string)
	// จะพิมพ์ค่า slice ที่มีความยาวและความจุเท่ากับ 3
	f.Println("emp:", s, "len:", len(s), "cap:", cap(s))

	// การกำหนดค่าและการเข้าถึงค่าใน slice
	// กำหนดค่าให้กับ slice โดยใช้ s[0] = "a", s[1] = "b" และ s[2] = "c"
	s[0] = "a"
	s[1] = "b"
	s[2] = "c"
	f.Println("set:", s)    // พิมพ์ค่า slice ที่มีค่าเป็น ["a", "b", "c"]
	f.Println("get:", s[2]) // พิมพ์ค่า "c" ซึ่งอยู่ในตำแหน่งที่ 2

	// การเพิ่มค่าใน Slice ด้วย append
	s = append(s, "d")      // เพิ่มค่า "d" ลงใน Slice
	s = append(s, "e", "f") // เพิ่มค่า "e" และ "f" ลงใน slice
	f.Println("apd:", s)    // พิมพ์ค่า slice ที่มีค่าเป็น ["a", "b", "c", "d", "e", "f"]

	// การคัดลอกข้อมูลจาก Slice หนึ่งไปยังอีก Slice หนึ่ง
	c := make([]string, len(s)) //  สร้าง slice ชื่อ c ที่มีความยาวเท่ากับ s
	copy(c, s)                  // คัดลอกข้อมูลจาก s ไปยัง c
	f.Println("cpy:", c)        // พิมพ์ค่า slice c ที่มีค่าเหมือนกับ s

	// การใช้งาน Slice Operator
	l := s[2:5] // สร้าง slice ใหม่ 1 จากตำแหน่งที่ 2 ถึง 4 ใน s
	f.Println("sl1:", l)
	l = s[:5] // สร้าง slice ใหม่ 1 จากตำแหน่งเริ่มต้นถึง 4 ใน s
	f.Println("sl2:", l)
	l = s[2:] // สร้าง slice ใหม่ 1 จากตำแหน่งที่ 2 ถึงตำแหน่งสุดท้ายใน s
	f.Println("sl3:", l)

	// การประกาศและกำหนดค่า slice ในบรรทัดเดียว
	t := []string{"g", "h", "i"} // สร้างและกำหนดค่าให้ slice t ในบรรทัดเดียว
	f.Println("dcl:", t)         // พิมพ์ค่า slice t ที่มีค่าเป็น ["g","h","i"]

	// การเปรียบเทียบ Slices
	t2 := []string{"g", "h", "i"} // สร้าง slice t2 ที่มีค่าเท่ากับ t
	if slices.Equal(t, t2) {      // ตรวจสอบว่า slice t และ t2 มีค่าเท่ากันหรือไม่
		f.Println("t == t2") // ถ้าเท่ากันพิมพ์ t == t2 ออกจอ
	}

	// การสร้าง Slice หลายมิติ
	twoD := make([][]int, 3) // สร้าง slice สองมิติที่มี 3 แถว (rows)
	for i := 0; i < 3; i++ { // สำหรับแต่ละแถว สร้าง slice ภายในด้วยความยาวที่เพิ่มขึ้นตามค่า i
		// กำหนดความยาวของแต่ละแถวเป็น index + 1
		// แถวแรก i = 0 จะมีความยาว 1, แถวที่สอง i = 1 ยาว 2, แถวที่สาม i = 2 ยาว 3
		innerLen := i + 1
		// สร้าง slice ของ int ด้วยความยาวที่กำหนด
		// แต่ละแถวจะมีความยาวไม่เท่ากัน
		twoD[i] = make([]int, innerLen)

		for j := 0; j < innerLen; j++ { // วนลูปตามความยาวของแต่ละแถว
			// กำหนดค่าเป็นผลรวมของ index แถวและ index คอลัมน์
			twoD[i][j] = i + j
		}
	}
	f.Println("2D: ", twoD) // พิมพ์ค่า slice สองมิติที่มีค่าเป็น
	// [[0] [1 2] [2 3 4]]

}

/* สรุป
โค้ดนี้แสดงการใช้งาน slices ในภาษา Go ซึ่งมีความยืดหยุ่นและทรงพลัง
มากกว่าการใช้ arrays โค้ดครอบคลุมการสร้าง, การกำหนดค่า, การเพิ่มและคัด
ลอกข้อมูล, การใช้งาน slice operator, และการสร้าง slice หลายมิติ
Slices เป็นโครงสร้างข้อมูลที่สำคัญใน Go ที่สามารถปรับตัวได้ดีในหลายๆ
สถานการณ์การเขียนโปรแกรม
*/
