     Slices ในภาษา Go
slices เป็นโครงสร้างข้อมูลที่สำคัญในภาษา Go ซึ่งให้การใช้งานที่ยืดหยุ่นและ
ทรงพลังมากกว่า arrays ต่างจาก arrays, slices ถูกกำหนดประเภทจาก
องค์ประกอบที่อยู่ในนั้นเท่านั้น ไม่ใช่จากจำนวนองค์ประกอบ (elements)

     คุณสมบัติและการใช้งาน Slices
1.การกำหนดและค่าเริ่มต้นของ Slices
ถ้า slice ไม่ได้ถูกกำหนดค่า (uninitialized) มันจะเท่ากับ nil
และมีความยาว (length) เป็น 0
เราสามารถสร้าง slice ว่างที่มีความยาวไม่เป็น 0 ได้โดยใช้ฟังก์ชัน
make ฟังก์ชันนี้สามารถระบุความจุ (capacity) ของ slice ได้ ซึ่ง
ค่าเริ่มต้นจะเท่ากับความยาวของ Slice

2.การใช้งาน Slices
เราสามารถกำหนดค่า (set) และเรียกดูค่า (get) จาก slice ได้
เหมือนกับ array
ฟังก์ชัน len() คืนค่าความยาวของ slice และ cap() คืนค่าความ
จุ (capacity) ของ slice

3.การเพิ่มและคัดลอกข้อมูลใน Slices
ฟังก์ชัน append() ใช้สำหรับเพิ่มค่าลงใน slice และจะคืนค่า
slice ใหม่ที่อาจมีความยาวและความจุที่เปลี่ยนไป
การคัดลอกข้อมูลจาก slice หนึ่งไปยังอีก slice หนึ่งสามารถ
ทำได้โดยใช้ฟังก์ชัน copy

4.การใช้งาน Slice Operator
slice[low:high] ใช้สำหรับการตัดช่วงข้อมูลจาก slice ตัวอย่าง
เช่น s[2:5] จะคืนค่าองค์ประกอบที่เริ่มต้นจากตำแหน่งที่ 2 ถึง 4 (ไม่
รวมตำแหน่ง 5)

5.การประกาศและกำหนดค่าให้ Slices
เราสามารถประกาศและกำหนดค่าให้กับ slice ในบรรทัดเดียวได้ เช่น
t := []string{"g", "h", "i"}

6.การใช้งานฟังก์ชันในแพ็กเกจ slices
แพ็กเกจ slices มีฟังก์ชันอำนวยความสะดวกมากมายสำหรับการ
ทำงานกับ slices เช่น การเปรียบเทียบ slice ด้วย slices.Equal

7.Slices หลายมิติ
ต่างจาก arrays หลายมิติ, ความยาวของ slice ภายใน slice 
หลายมิติสามารถเปลี่ยนแปลงได้