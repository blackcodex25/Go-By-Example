ฟังก์ชันนิรนาม (Anonymous Function) 
(บางครั้งเรียกว่า Lambda Function ในภาษาโปรแกรมอื่นๆ)
ฟังก์ชันนิรนามเป็นฟังก์ชันที่ไม่มีชื่อและสามารถกำหนดให้ตัวแปรได้โดยตรง 
ฟังก์ชันนี้สามารถนำไปใช้งานได้เหมือนฟังก์ชันทั่วไป

ฟังก์ชันนิรนาม (Anonymous Function) มีคุณสมบัติและลักษณะ
เฉพาะดังนี้:

1.ไม่มีชื่อ (Anonymous)
ฟังก์ชันนิรนามถูกประกาศโดยไม่ต้องกำหนดชื่อให้กับฟังก์ชัน
ซึ่งต่างจากฟังก์ชันปกติที่มีชื่อระบุชัดเจน
// ฟังก์ชันนิรนามที่กำหนดให้ตัวแปร
add := func(a, b int) int {
    return a + b
}

2.สามารถกำหนดให้ตัวแปรได้
ฟังก์ชันนิรนามสามารถถูกกำหนดให้กับตัวแปรหรือเรียกใช้
ทันทีในบริบทที่ต้องการ ซึ่งตัวแปรที่ถูกกำหนดสามารถใช้
ฟังก์ชันนั้นได้เหมือนฟังก์ชันทั่วไป
multiply := func(x, y int) int {
    return x * y
}
result := multiply(2, 3) // เรียกใช้ผ่านตัวแปร

3.สามารถใช้เป็นฟังก์ชัน callback หรือ argument
ฟังก์ชันนิรนามมักถูกใช้เป็นฟังก์ชัน callback หรือส่งผ่านเป็น
พารามิเตอร์ในฟังก์ชันอื่น เช่น ในการจัดเรียงหรือทำงานกับ goroutines
slices.SortFunc(fruits, func(a, b string) int {
    return len(a) - len(b)
})

4.สามารถเข้าถึงตัวแปรภายนอกได้ (Closure)
ฟังก์ชันนิรนามสามารถเข้าถึงและใช้งานตัวแปรที่อยู่ภายนอก
ขอบเขตของฟังก์ชันนั้นได้ ซึ่งคุณสมบัตินี้เรียกว่า Closure
counter := 0
increment := func() int {
    counter++
    return counter
}
fmt.Println(increment()) // counter = 1
fmt.Println(increment()) // counter = 2

5.สามารถใช้ในรูปแบบฟังก์ชันเรียกตัวเองได้
ฟังก์ชันนิรนามสามารถเรียกใช้ตัวเองได้ในบางสถานการณ์
เช่น การทำงานแบบ recursive
factorial := func(n int) int {
    if n == 0 {
        return 1
    }
    return n * factorial(n-1)
}

6.สามารถนิยามและเรียกใช้งานได้ทันที
(Immediately Invoked Function Expression - IIFE)
ฟังก์ชันนิรนามสามารถนิยามและเรียกใช้งานทันทีในบรรทัดเดียวกันได้
result := func(a, b int) int {
    return a + b
}(3, 4) // ผลลัพธ์คือ 7

สรุป:
ฟังก์ชันนิรนามเป็นฟังก์ชันที่ไม่มีชื่อ สามารถนิยามและกำหนดให้ตัวแปรได้ 
และสามารถใช้ประโยชน์ในการเขียนโค้ดที่สั้น กระชับ และยืดหยุ่นมากขึ้น
เหมาะสำหรับสถานการณ์ที่ฟังก์ชันต้องการใช้งานเพียงครั้งเดียว 
หรือใช้ในการเรียกผ่านฟังก์ชันอื่นๆ