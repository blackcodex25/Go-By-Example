การสนับสนุน iterators ที่เพิ่มเข้ามาในภาษา Go ตั้งแต่เวอร์ชัน 1.23 
ซึ่งช่วยให้สามารถใช้งาน range เพื่อวนลูป (loop) กับอะไรก็ได้แทบทุกอย่าง 

1.การใช้งาน Iterators ใน Go เวอร์ชัน 1.23
ในเวอร์ชัน 1.23 ของ Go ได้เพิ่มการสนับสนุนสำหรับ 
iterators ซึ่งเป็นการเพิ่มความสามารถในการใช้ range 
เพื่อวนลูปกับสิ่งต่างๆ อย่างมีประสิทธิภาพมากขึ้น ไม่จำกัด
เพียงแค่ array, slice หรือ map เท่านั้น

2.การปรับปรุง List Type
ในตัวอย่างก่อนหน้า มีการใช้งานเมธอด AllElements ใน 
List type ที่ทำหน้าที่คืนค่า slice ขององค์ประกอบ
ทั้งหมดใน list แต่เมื่อใช้ iterators การจัดการกับ List จะมี
ประสิทธิภาพมากขึ้น

3.การใช้งาน Iterators กับฟังก์ชัน
ฟังก์ชัน All ใน List ตอนนี้จะคืนค่า iterator ซึ่งใน Go 
คือฟังก์ชันที่มี signature พิเศษ
ฟังก์ชัน iterator นี้จะรับฟังก์ชันอื่นเป็นพารามิเตอร์ ซึ่งตาม
ธรรมเนียมจะเรียกว่า yield (แต่ชื่อสามารถตั้งได้ตามต้องการ)
yield จะถูกเรียกสำหรับแต่ละองค์ประกอบที่เราต้องการวนลูป 
และผลลัพธ์ที่ได้จาก yield จะถูกใช้ในการตรวจ
สอบว่าควรหยุดการวนลูปก่อนหรือไม่

การใช้งาน Iterators ที่ไม่มีโครงสร้างข้อมูลรองรับ
การใช้งาน iterator ไม่จำเป็นต้องมีโครงสร้างข้อมูลรองรับ 
เช่น array หรือ slice และยังสามารถใช้กับชุดข้อมูลที่ไม่มีที่
สิ้นสุดได้ ตัวอย่างเช่น การสร้าง iterator สำหรับตัวเลข 
Fibonacci ซึ่งจะทำงานต่อไปตราบเท่าที่ yield ยังคงคืน
ค่าเป็น true

การใช้งาน List.All กับ range loop
เมื่อ List.All คืนค่า iterator เราสามารถใช้มันใน 
range loop ได้เหมือนกับการใช้ array หรือ slice

ฟังก์ชันที่มีประโยชน์สำหรับ Iterators
มีแพ็กเกจเช่น slices ที่มีฟังก์ชันสำหรับจัดการกับ 
iterators อย่างเช่น Collect ซึ่งจะรับ iterator และ
รวบรวมค่าทั้งหมดลงใน slice
เมื่อการวนลูปพบ break หรือ return การทำงานของ
ฟังก์ชัน yield ที่ถูกส่งไปยัง iterator จะคืนค่าเป็น false 
เพื่อหยุดการทำงานของ iterator

สรุป
Iterators ใน Go เวอร์ชัน 1.23 ทำให้การวนลูปผ่านข้อมูล
ทำได้ง่ายและยืดหยุ่นมากขึ้น
Iterators ช่วยให้การจัดการข้อมูลมีประสิทธิภาพมากขึ้น
โดยไม่ต้องพึ่งพาโครงสร้างข้อมูลที่ตายตัว และสามารถใช้
ในการจัดการกับข้อมูลที่ไม่มีที่สิ้นสุดได้
Iterators สามารถใช้งานใน range loop และมีเครื่องมือ
สำหรับจัดการกับ iterators โดยเฉพาะ