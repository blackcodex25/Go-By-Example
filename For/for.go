package main

import "fmt"

/* การใช้ for loop ในภาษา Go ซึ่งเป็นโครงสร้างควบคุมการวนลูปเพียง
อย่างเดียวในภาษา Go ลูปนี้มีหลายรูปแบบพื้นฐานที่สามารถใช้ได้ตามลักษณะ
งานที่ต้องการ
*/
/* ประเภทต่างๆ ของลูปใน Go
1.ลูปที่มีเงื่อนไขเดียว (Single Condition)
- ลูปนี้จะทำงานตราบใดที่เงื่อนไขเป็นจริง (true)

2.ลูปแบบคลาสสิกที่ประกอบไปด้วย การเริ่มต้นเงื่อนไข
และการเพิ่มค่าตัวแปร
คล้ายกับลูป for ในภาษา C หรือ C++ ที่มีการกำหนดค่าเริ่มต้น
กำหนดค่าเริ่มต้น, เงื่อนไข, และการเปลื่ยนแปลงค่าตัวแปรหลังจบ
แต่ละรอบ

3.การวนลูปโดยใช้ range
ใช้สำหรับการทำซ้ำงานจำนวน N ครั้ง โดยสามารถใช้
กับการวนซ้ำผ่านตัวเลขหรือลำดับข้อมูลอื่นๆ เช่น อาร์เรย์ หรือ สตริง

4.ลูปไม่มีเงื่อนไข
ลูปนี้จะวนไปเรื่อยๆ จนกว่าจะมีคำสั่ง break เพื่อหยุดลูป
หรืือ retrun ออกนอกฟังก์ชัน

5.การข้ามไปยังรอบถัดไปของลูป (Continue)
ใช้คำสั่ง continue เพื่อข้ามไปยังรอบถัดไปของลูปทันที
โดยจะไม่รันคำสั่งใดๆ ที่เหลือในรอบนั้นๆ
*/

func main() {
	// ลูปที่มีเงื่อนไขเดียว
	// ลูปนี้จะเริ่มจากค่า i = 1 และจะพิมพ์ค่าของ i ออกจอ
	// ในแต่ละรอบจนกว่า i จะมากกว่า 3
	i := 1
	for i <= 3 {
		fmt.Println(i) // ผลลัพธ์จะได้ 1, 2, 3
		i += 1
	}

	// ลูปแบบคลาสสิก
	// ลูปนี้จะเริ่มจาก j = 0 และเพิ่มค่าขึ้นทีละ 1 ในแต่ละรอบ
	// จนกว่า j จะน้อยกว่า 3
	for j := 0; j < 3; j++ {
		fmt.Println(j) // ผลลัพธ์จะได้ 0, 1, 2
	}

	// ลูปแบบ range (แต่มีข้อผิดพลาดในโค้ด)
	// การใช้ range กับตัวเลขนั้นจะทำให้เกิดข้อผิดพลาด เพราะ range
	// ใช้สำหรับการวนลูปผ่าน Collections (เช่น array, slice)
	// วิธีที่ถูกต้องคือการใช้ range กับ slices, maps, หรือ string
	// ไม่ใช่ตัวเลขโดยตรง
	for i := range 3 {
		fmt.Println("Range", i)
	}

	// ลูปไม่มีเงื่อนไข
	// ลูปนี้จะรันไปเรื่อยๆ เพราะไม่มีเงื่อนไขในการหยุดลูป
	// แต่จะหยุดเมื่อถึงคำสั่ง break
	for {
		fmt.Println("Loop") // ผลลัพธ์จะได้คำว่า Loop เพียงครั้งเดียว
		break
	}

	// ลูปที่ใช้ continue
	// ลูปนี้จะวนผ่านตัวเลขจาาก 0 ถึง 5 โดยใช้ range 6 และจะพิมพ์
	// ตัวเลขที่ไม่ใช่คู่ (เช่น 1, 3, 5) โดยถ้าเป็นเลขคู่จะใช้ continue
	// เพื่อข้ามไปยังรอบถัดไปทันที
	for n := range 6 {
		if n%2 == 0 {
			continue
		}
		fmt.Println(n) // ผลลัพธ์จะได้ 1, 3, 5
	}
}

/* โค้ดตัวอย่างนี้แสดงให้เห็นถึงวิธีการใช้ลูปแบบต่างๆ ในภาษา Go
ตั้งแต่ลูปที่มีเงื่อนไขเดียว ลูปแบบคลาสสิก, ลูปแบบไม่มีเงื่อนไข,
และการใช้ continue เพื่อข้ามการประมวลผลในบางรอบของลูป
*/
