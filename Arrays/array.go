package main

import (
	f "fmt"
)

/* Arrays ในภาษา Go
ในภาษา Go array คือชุดขององค์ประกอบที่มีลำดับเลขและมีคววามยาว
ที่กำหนดแน่นอน ซึ่งประเภทขององค์ประกอบ (element) และความยาว (length) จะถูก
กำหนดเป็นส่วนหนึ่งของประเภทของ array นั้นๆ ในโค้ด Go ทั่วไป slice เป็น
โครงสร้างข้อมูลที่ใช้บ่อยกว่า array แต่ array ก็ยังมีประโยชน์ในบางสถานการณ์
*/
/* อธิบาย Logic
1.การสร้างและการใช้งาน array
array เป็นโครงสร้างข้อมูลที่มีขนาดคงที่ ซึ่งแต่ละตำแหน่ง
ใน array จะถูกกำหนดค่าเริ่มต้น (Zero-valued) โดยอัตโนมัติ
ซึ่งสำหรับตัวเลข (int) ค่าเริ่มต้นนี้จะเป็น 0
เราสามารถกำหนดค่าในตำแหน่งที่ต้องการได้ด้วยการใช้ syntax [index] = value
ฟังก์ชัน len() ที่มีอยู่ในตัว Go จะคืนค่าความยาวของ array

2.การประกาศและการกำหนดค่าเริ่มต้นในบรรทัดเดียว
สามารถประกาศและกำหนดค่า array ในบรรทัดเดียว โดย
ใช้ปีกกาเปิด-ปิด {} เพื่อกำหนดค่าเริ่มต้นให้กับ array
นอกจากนี้ ยังสามารถให้คอมไพเลอร์ของ Go กำหนด
จำนวนขององค์ประกอบ (elements) ใน array โดยการใช้
[...] ซึ่งจะช่วยลดการกำหนดขนาดแบบ manual ได้

3.การสร้าง array หลายมิติ
array ใน Go เป็นแบบหนึ่งมิติ, แต่เราสามารถรวมหลาย
array เข้าด้วยกันเพื่อสร้างโครงสร้างข้อมูลแบบหลายมิติได้
เช่น two-dimensional array (2D array)
*/
// ประกาศตัวแปรแบบเป็นกลุ่ม โดยใช้วงเล็บเปิด-ปิด ()
var (
	// สร้าง array ชื่อ a ที่มีขนาด 5 องค์ประกอบ (elements) แต่ละตัวเป็น int
	a [5]int
	// สร้าง twoD เป็น array ขนาด 2x3 (2 rows, 3 columns) ซึ่งประกอบไปด้วย int
	// มี 2 แถว(rows) และ 3 คอลัมน์(columns)
	twoD [2][3]int
)

func main() {
	// โดยค่าเริ่มต้น, องค์ประกอบใน array จะถูกกำหนดเป็น 0
	// (zero-valued) ดังนั้น fmt.Println("emp: ", a) จะ
	// พิมพ์ค่า [0 0 0 0 0]
	f.Println("emp: ", a)
	// กำหนดค่าในตำแหน่งที่ 4 ของ array (a[4] = 100) และ
	// พิมพ์ค่าของ array ใหม่ จะได้ค่า [0 0 0 0 100]
	a[4] = 100
	// พิมพ์ค่าความยาวของ array (len(a)) ซึ่งจะได้ค่า 5
	f.Println("set: ", a[4])
	f.Println("len: ", len(a))

	// การประกาศและการกำหนดค่าเริ่มต้นให้ array
	b := [5]int{1, 2, 3, 4, 5}  // สร้าง array ชื่อ b ที่มี 5 องค์ประกอบและกำหนดค่าตั้งต้นเป็น [1 2 3 4 5]
	f.Println("dcl: ", b)       // พิมพ์ array b ออกจอ
	b = [...]int{1, 2, 3, 4, 5} // เพื่อให้คอมไพเลอร์กำหนดขนาด array โดยอัตโนมัติจากค่าที่กำหนด
	f.Println("dcl: ", b)       // พิมพ์ array b ออกจอ

	// การกำหนดค่าใน array ที่มีตำแหน่งเฉพาะ
	b = [...]int{100, 3: 400, 500}
	f.Println("idx: ", b)
	// b = [...]int{100, 3: 400, 500} เป็นการกำหนดค่าใน
	// array โดย 100 จะอยู่ในตำแหน่งแรก 400 อยู่ที่
	// ตำแหน่งที่ 3 และ 500 อยู่ตำแหน่งสุดท้าย
	// พิมพ์ผลลัพธ์ที่ได้จะเป็น [100 0 0 400 500]

	// การสร้าง array สองมิติ
	// ใช้ลูปซ้อน nested for  เพื่อกำหนดค่าให้กับแต่ละตำแหน่ง
	// โดยคำนวณจากผลรวมของ i + j
	for i := 0; i < 2; i++ { // ลูปภายนอกวนซ้ำผ่านแต่ละแถว
		for j := 0; j < 3; j++ { // ลูปภายในวนซ้ำผ่านแต่ละคอลัมน์ในแถวนั้นๆ
			twoD[i][j] = i + j // กำหนดค่าให้แต่ละตำแหน่งใน array
			// ค่าที่กำหนดคือผลรวมของ index แถว i และ index คอลัมน์ j
		}
	}
	// พิมพ์ผลลัพธ์ที่ได้จะเป็น [[0 1 2] [1 2 3]]
	f.Println("2D: ", twoD)

	// การกำหนดค่าเริ่มต้นให้กับ array 2 มิติ
	// กำหนดค่าให้ twoD โดยตรงผ่าน {} และกำหนดค่าใน
	// แต่ละแถวเป็น {1, 2, 3}
	twoD = [2][3]int{
		{1, 2, 3},
		{1, 2, 3},
	}
	// ผลลัพธ์จะะได้เป็น [[1 2 3] [1 2 3]]
	f.Println("2D: ", twoD)

}

/* สรุป
โค้ดนี้แสดงตัวอย่างการใช้งาน array ใน Go โดยครอบคลุมตั้งแต่การ
ประกาศ การกำหนดค่า การใช้ array หลายมิติ และการเข้าถึงองค์ประกอบใน
array, array ใน Go นั้นมีประโยชน์ในสถานการณ์ที่
ต้องการโครงสร้างข้อมูลที่มีขนาดคงที่และต้องการประสิทธิภาพในการ
เข้าถึงข้อมูลแบบรวดเร็ว
*/
