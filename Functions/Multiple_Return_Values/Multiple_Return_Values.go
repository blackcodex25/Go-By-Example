package main

import (
	f "fmt"
)

/* การใช้งานฟังก์ชันที่คืนค่าหลายค่าในภาษา Go
ภาษา Go มีคุณสมบัติพบได้บ่อยในภาษา Go
(idiomatic go) โดยมักใช้เพื่อคืนค่าผลลัพธ์และค่าความผิดพลาด
(error) จากฟังก์ชันพร้อมกัน

คุณสมบัติและการใช้งานฟังก์ชันที่คืนค่าหลายค่า
1.การคืนค่าหลายค่า
ฟังก์ชันใน Go สามารถระบุประเภทของค่าที่จะคืนได้มากกว่าหนึ่ง
ค่า โดยในตัวอย่างนี้ (int, int) ระบุว่าฟังก์ชันจะคืนค่าตัวเลข
2 ตัวที่มีชนิดข้อมูลเป็น int

2.การใช้งานค่าที่คืนจากฟังก์ชัน
เมื่อเรียกใช้ฟังก์ชันที่คืนค่าหลายค่า เราสามารถใช้การกำหนดค่า
แบบหลายตัวแปร (multiple assignment) เพื่อรับค่าทั้งหมดที่
คืนจากฟังก์ชันได้เช่น a, b := vals() จะรับค่าทั้งสองที่คืน
จากฟังก์ชัน vals

3.การละค่าบางค่าที่คืนจากฟังก์ชัน
หากเราไม่ต้องการใช้งานค่าที่คืนทั้งหมดจากฟังก์ชัน เราสามารถ
ละการรับค่าที่ไม่ต้องการได้โดยใช้ _ เป็นตัวระบุแบบว่าง
(blank identifier) เช่น _, c := vals() จะละค่าตัวแรกที่
คืนจากฟังก์ชันและรับเพียงค่าที่สองเท่านั้น
*/
// ฟังก์ชัน vals ถูกออกแบบให้คืนค่าตัวเลข 2 ค่า คือ 3 และ 7
func vals() (int, int) {
	// ฟังก์ชันนี้ระบุว่ามีการคืนค่าหลายค่า (int, int) ซึ่ง
	// หมายความว่าฟังก์ชันจะคืนค่าตัวเลขชนิด int สองตัว
	return 3, 7
}

func main() {
	// เรียกใช้ฟังก์ชัน vals  และรับค่าที่คืนจาก
	// ฟังก์ชันทั้งสองค่าเก็บไว้ในตัวแปร a และ b
	a, b := vals()
	// พิมพ์ค่า a ซึ่งคือ 3
	f.Println(a)
	// พิมพ์ค่า b ซึ่งคือ 7
	f.Println(b)

	// เรียกใช้ฟังก์ชัน vals แต่รับเฉพาะค่าที่สอง
	// เก็บไว้ในตัวแปร c โดยละการรับค่าที่หนึ่งด้วย _
	_, c := vals()
	// พิมพ์ค่า c ซึ่งคือ 7
	f.Println(c)

	/*g := a + b
	f.Println(g) */
}

/* สรุป
โค้ดนี้แสดงให้เห็นถึงการใช้งานฟังก์ชันที่คืนค่าหลายค่าในภาษา Go ซึ่งเป็น
คุณสมบัติที่มีประโยชน์มากในการเขียนโปรแกรมแบบ Go-style
(idiomatic Go) ฟังก์ชันที่คืนค่าหลายค่าสามารถช่วยลดความซับซ้อนใน
การจัดการข้อมูลและข้อผิดพลาดได้อย่างมีประสิทธิภาพ อีกทั้งยังแสดงวิธี
การรับค่าบางค่าและละค่าบางค่าเมื่อไม่ต้องการใช้งาน
*/
