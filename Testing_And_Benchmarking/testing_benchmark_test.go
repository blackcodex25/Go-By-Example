package main

import (
	"fmt"
	"testing"
)

/* การทดสอบและการวัดประสิทธิภาพ (benchmark)               */
/* ของฟังก์ชัน IntMin ซึ่งหาค่าต่ำสุดระหว่างสองตัวเลข (a และ b) */
/* โดยใช้แพ็กเกจ testing สำหรับการทดสอบและเบนช์มาร์ค 	  */
/* ฟังก์ชันนี้รับค่า a และ b เป็นตัวเลขชนิด int  			  */
/* และคืนค่าตัวเลขที่น้อยที่สุดระหว่างสองค่าที่ได้รับมา           */

// 1.ฟังก์ชัน IntMin
func IntMin(a, b int) int {
	if a < b {
		return a
	}
	return b

}

// 2.ฟังก์ชันทดสอบ TestIntMinBasic
/* ฟังก์ชันนี้สร้างขึ้นเพื่อทดสอบฟังก์ชัน IntMin ด้วยค่า 2          */
/* และ -2 โดยคาดหวังผลลัพธ์ว่า IntMin(2, -2) ต้องเท่ากับ -2 */
func TestIntMinBasic(t *testing.T) {
	ans := IntMin(2, -2)
	/* หากผลลัพธ์ไม่ตรงกับที่คาดไว้ จะใช้ t.Errorf เพื่อ */
	/* รายงานข้อผิดพลาดพร้อมข้อความบอกผลลัพธ์ที่ได้รับ */
	/* (ans) และผลลัพธ์ที่คาดหวัง                 */
	if ans != -2 {
		t.Errorf("IntMin(2, -2) = %d; want -2", ans)
	}
}

// 3.ฟังก์ชันทดสอบแบบ Table-Driven: TestIntMinTableDriven
/* ฟังก์ชันนี้ใช้รูปแบบ table-driven เพื่อทดสอบหลายๆ กรณีในครั้งเดียว         */
/* โดยใช้โครงสร้างข้อมูล (struct) เพื่อเก็บข้อมูลการทดสอบ 	              */
/* โค้ดประกอบด้วยตาราง tests ที่เก็บค่า a และ b รวมถึงค่าที่คาดหวัง (want) */
/* จากการเรียก IntMin(a, b) 									 */
func TestIntMinTableDriven(t *testing.T) {
	var tests = []struct {
		a, b int
		want int
	}{
		{0, 1, 0},
		{1, 0, 0},
		{2, -2, -2},
		{0, -1, -1},
		{-1, 0, -1},
	}
	/* วนลูปไปแต่ละชุดข้อมูลในตาราง และใช้ t.Run เพื่อสร้าง "subtest"	 		*/
	/* แยกต่างหากสำหรับแต่ละกรณีการทดสอบ 								 */
	/* ทำให้สามารถแสดงผลการทดสอบแยกย่อยออกมาชัดเจน เมื่อใช้คำสั่ง go test -v*/
	for _, tt := range tests {
		testname := fmt.Sprintf("%d,%d", tt.a, tt.b)
		t.Run(testname, func(t *testing.T) {
			ans := IntMin(tt.a, tt.b)
			if ans != tt.want {
				t.Errorf("got %d, want %d", ans, tt.want)
			}
		})
	}
}

// 4.ฟังก์ชันทดสอบประสิทธิภาพ (Benchmark): BenchmarkIntMin
/* ฟังก์ชันนี้ทำการวัดประสิทธิภาพของฟังก์ชัน IntMin */
func BenchmarkIntMin(b *testing.B) {
	/* โดยใช้การวนลูป b.N ครั้ง (ซึ่งถูกกำหนดโดยระบบทดสอบประสิทธิภาพของ Go) */
	for i := 0; i < b.N; i++ {
		IntMin(1, 2)
	}
	/* คำสั่ง go test -bench ใช้เพื่อเรียกการทดสอบ benchmark  		   */
	/*  ซึ่งจะเพิ่มค่า b.N ในแต่ละครั้งเพื่อให้ได้ผลลัพธ์การวัดประสิทธิภาพที่แม่นยำ */
}

/* สรุป */
/* Unit testing: ทดสอบความถูกต้องของฟังก์ชัน IntMin       */
/* โดยมีการทดสอบหลายกรณี (table-driven) รวมถึงการ       */
/* รายงานข้อผิดพลาดหากผลลัพธ์ไม่เป็นไปตามที่คาด            */
/* Benchmarking: วัดประสิทธิภาพของฟังก์ชัน IntMin        */
/* โดยดูว่าฟังก์ชันทำงานได้รวดเร็วเพียงใดในการเรียกซ้ำหลายครั้ง */
