Number Parsing คือกระบวนการแปลงข้อมูลที่เป็นสตริง (string)
ซึ่งอาจเป็นตัวเลข (เช่น "123", "45.67") 
ให้กลายเป็นตัวแปรที่สามารถใช้ในการคำนวณได้ (เช่น integer, float) 
ในภาษาโปรแกรม

การใช้ Number Parsing
การแปลงหรือ "parsing" ตัวเลขมีความสำคัญในหลายกรณี เช่น:

1.การอ่านข้อมูลจากไฟล์หรืออินพุตของผู้ใช้:
เมื่อเรารับข้อมูลจากผู้ใช้หรืออ่านจากไฟล์ ข้อมูลอาจจะอยู่ในรูปแบบของสตริง
ตัวอย่างเช่น เมื่อรับค่าจากฟอร์มของเว็บ หรือไฟล์ข้อความ เราอาจ
ต้องแปลงสตริงเหล่านี้เป็นตัวเลขเพื่อทำการคำนวณ

2.การประมวลผลข้อมูลที่นำเข้ามา:
ข้อมูลที่ได้รับอาจจะมีรูปแบบต่างๆ เช่น ตัวเลขที่เป็นจำนวนเต็ม (integer)
หรือจำนวนจริง (float) เราต้องทำการแปลงข้อมูลเหล่านี้ให้เป็นประเภท
ตัวแปรที่เหมาะสมเพื่อให้โปรแกรมทำงานได้อย่างถูกต้อง

การใช้งานในภาษา Go
ใน Go, เราสามารถใช้ฟังก์ชันในแพ็คเกจ strconv สำหรับการ parsing 
ตัวเลขจากสตริง:
1.การแปลงจากสตริงเป็นตัวเลขจำนวนเต็ม:
str := "123"
    num, err := strconv.Atoi(str) // Atoi: ASCII to integer
    if err != nil {
        fmt.Println("Error:", err)
        return
    }
    fmt.Println("The number is:", num)

2.การแปลงจากสตริงเป็นจำนวนจริง:
 str := "45.67"
    num, err := strconv.ParseFloat(str, 64) // ParseFloat: parse string to float64
    if err != nil {
        fmt.Println("Error:", err)
        return
    }
    fmt.Println("The number is:", num)

3.การแปลงจากสตริงเป็นจำนวนเต็มที่มีฐาน (base):
str := "1010"
    num, err := strconv.ParseInt(str, 2, 64) // ParseInt: parse string to int with base 2 (binary)
    if err != nil {
        fmt.Println("Error:", err)
        return
    }
    fmt.Println("The number is:", num)

การจัดการข้อผิดพลาด
การ parsing อาจเกิดข้อผิดพลาดได้ เช่น เมื่อสตริงที่เราพยายามแปลงไม่ใช่รูปแบบที่ถูกต้อง
สำหรับประเภทที่เราต้องการ ดังนั้นการตรวจสอบข้อผิดพลาด (error checking) 
เป็นสิ่งสำคัญเสมอในการใช้ฟังก์ชัน parsing

สรุป
Number parsing เป็นกระบวนการที่สำคัญในการแปลงข้อมูลจากรูปแบบสตริงเป็นตัวแปรตัวเลข
ที่สามารถใช้ในการคำนวณได้ การใช้งานฟังก์ชัน parsing ในภาษา Go
สามารถช่วยให้การแปลงนี้ทำได้อย่างมีประสิทธิภาพและปลอดภัย
