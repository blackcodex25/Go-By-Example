package main

import (
	"os"
)

/*
	การใช้ panic ในภาษา Go เพื่อสร้างสถานการณ์ที่

ทำให้โปรแกรมหยุดทำงานเมื่อพบกับข้อผิดพลาดหรือปัญหาที่ไม่คาดคิด
*/
func main() {
	// เรียกใช้ panic พิมพ์ผลลัพธ์ทันทีด้วยข้อความ "a problem"
	panic("a problem")

	// สร้างไฟล์ใหม่โดยใช้ os.Create() พร้อมตรวจสอบไฟล์ที่สร้างด้วย err
	_, err := os.Create("/tmp/file")

	// ตรวจสอบข้อผิดพลาดจากการสร้างไฟล์
	if err != nil {
		// ถ้าใช่ พิมข้อผิดพลาดออกจอ
		panic(err)
	}
}

/*
การทำงานของโค้ด:
*1.เรียกใช้ panic ทันทีด้วยข้อความ "a problem":
panic("a problem")
เมื่อเรียกฟังก์ชัน panic ด้วยข้อความ "a problem"
โปรแกรมจะหยุดทำงานทันที
จะเกิดการแสดงผลข้อความข้อผิดพลาด "a problem"
และจะออกจากโปรแกรมทันทีโดยไม่ดำเนินการต่อไปยังโค้ดบรรทัดอื่นๆ

*2.สร้างไฟล์ใหม่โดยใช้ os.Create:
_, err := os.Create("/tmp/file")
ฟังก์ชัน os.Create จะพยายามสร้างไฟล์ที่ตำแหน่ง
/tmp/file บนระบบไฟล์ หากสำเร็จจะส่งกลับค่าไฟล์
descriptor (ซึ่งถูกละไว้ใน _)
และค่า err ที่ระบุว่าเกิดข้อผิดพลาดหรือไม่

*3.ตรวจสอบข้อผิดพลาดจากการสร้างไฟล์:
if err != nil {
    panic(err)
}
หากเกิดข้อผิดพลาดระหว่างการสร้างไฟล์ (err != nil)
โปรแกรมจะเรียกใช้ panic(err) เพื่อแสดงข้อผิดพลาดที่เกิดขึ้น
และหยุดโปรแกรมทันที
อย่างไรก็ตาม ในโค้ดนี้ฟังก์ชัน os.Create ไม่ถูกเรียกใช้งานเลย
เพราะโปรแกรมได้เรียกใช้ panic("a problem") ที่บรรทัดแรกก่อนแล้ว
*/
/*
*สรุป Logic ของโค้ด
โปรแกรมนี้ตั้งใจเรียก panic ด้วยข้อความ "a problem"
ตั้งแต่ต้น ซึ่งจะทำให้โปรแกรมหยุดทำงานและไม่ไปดำเนิน
การต่อที่โค้ดบรรทัดอื่นๆ
หากลบหรือแสดงความคิดเห็นบรรทัดที่เรียก panic("a problem")
โค้ดส่วนถัดไปจะทำงาน และหากการสร้างไฟล์ /tmp/file ล้มเหลว
โปรแกรมจะเรียก panic(err) เพื่อหยุดการทำงาน
*/
