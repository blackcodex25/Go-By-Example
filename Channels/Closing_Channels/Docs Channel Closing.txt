อธิบายถึงการ Closing channel ในภาษา Go และประโยชน์ของการ Closing channel 
เมื่อไม่มีค่าที่จะส่งต่อไปแล้ว ซึ่งสามารถใช้เพื่อสื่อสารให้ goroutine 
ที่รับค่าทราบว่าการส่งค่าเสร็จสิ้นแล้ว

Closing = Closing !

การClosing channel:
การClosing channel หมายถึงไม่มี
ค่าที่จะถูกส่งเข้ามาใน channel นั้นอีกต่อไป การ Closing
channel นี้มีประโยชน์เพื่อแจ้งให้ goroutine ที่รับค่า
ทราบว่าไม่มีข้อมูลที่ต้องรอรับอีกแล้ว

ตัวอย่างการใช้ channel ในการสื่อสารระหว่าง goroutines:
ในตัวอย่างนี้ เราใช้ jobs channel เพื่อ
สื่อสารงาน (jobs) จาก goroutine หลัก
(main()) ไปยัง worker goroutine เมื่อไม่มี
งานที่จะส่งไปอีก ก็จะทำการ Closing jobs
channel เพื่อแจ้งให้ worker ทราบว่างาน
ทั้งหมดถูกส่งไปแล้ว

การทำงานของ worker goroutine:
Worker goroutine จะทำงานโดยรับข้อมูลจาก
jobs channel ทีละรายการ โดยใช้รูปแบบ
j, more := <-jobs ในรูปแบบนี้ ตัวแปร
more จะเป็น false ถ้า channel jobs
ถูก Closing และค่าทั้งหมดใน channel ถูกดึงออกไป
แล้ว การใช้เงื่อนไขนี้เพื่อส่งสัญญาณผ่าน
done channel เมื่อ worker ทำงานเสร็จสิ้น
ทุกงาน

การส่งงานไปยัง channel และการ Closing channel:
ในตัวอย่างนี้ มีการส่งงาน 3 งานไปยัง worker
ผ่าน jobs channel แล้วทำการ Closing channel
หลังจากส่งงานเสร็จ

การรอให้ worker ทำงานเสร็จ:
Goroutine หลักจะรอให้ worker ทำงานเสร็จ
โดยใช้วิธีการซิงโครไนซ์ (synchronization) ที่
ได้กล่าวถึงในบทความก่อนหน้านี้

การอ่านค่าจาก channel ที่ Closing แล้ว:
การอ่านค่าจาก channel ที่ถูก Closing จะสำเร็จทันที
โดยจะส่งคืนค่าเริ่มต้น (zero value) ของชนิด
ข้อมูลนั้นๆ ถ้ามีการคืนค่าที่สองที่เป็น true
หมายความว่าค่านั้นถูกส่งมาจากการส่งข้อมูลที่สำเร็จ
ไปยัง channel แต่ถ้าเป็น false หมายความว่า
ค่าศูนย์ที่ถูกสร้างขึ้นเพราะ channel นั้น Closing และไม่มีข้อมูลเหลืออยู่ใน
channel

การใช้งาน channel ใน Go และวิธีการสื่อสารระหว่าง goroutines โดยใช้ 
channel พร้อมทั้งการ Closing Channel อย่างถูกต้องเพื่อ
ควบคุมการทำงานของโปรแกรมให้มีประสิทธิภาพ