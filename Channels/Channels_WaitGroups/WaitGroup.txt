WaitGroup เป็นโครงสร้างข้อมูลในแพ็กเกจ sync ของภาษา
Go ที่ใช้ในการซิงโครไนซ์การทำงานของหลาย goroutines
โดยทำหน้าที่เป็นตัวนับเพื่อรอให้ goroutine ทั้งหมดที่
เกี่ยวข้องทำงานเสร็จสิ้นก่อนที่โค้ดจะดำเนินต่อไป

หลักการทำงานของ WaitGroup
เริ่มต้น WaitGroup
สร้างตัวแปร WaitGroup โดยการประกาศ var wg sync.WaitGroup

เพิ่มตัวนับ (Add)
ก่อนที่ goroutine จะเริ่มทำงาน ต้องเพิ่มตัวนับโดย
ใช้ wg.Add(n) ซึ่ง n คือตัวเลขที่แสดงจำนวน
goroutine ที่จะเพิ่มเข้ามา

ลดตัวนับ (Done)
ในแต่ละ goroutine เมื่อทำงานเสร็จสิ้น ต้องเรียกใช้
wg.Done() เพื่อลดค่าตัวนับลง 1

รอให้ goroutine ทั้งหมดเสร็จสิ้น (Wait)
ใช้ wg.Wait() เพื่อบล็อกการทำงานของโค้ดที่ตามมา
จนกว่าตัวนับของ WaitGroup จะเป็นศูนย์ ซึ่ง
หมายความว่า goroutine ทั้งหมดได้ทำงานเสร็จแล้ว

ข้อดี
การซิงโครไนซ์ที่ง่าย
ช่วยให้เราสามารถซิงโครไนซ์การทำงานของหลาย goroutines
ได้อย่างง่ายดายโดยไม่ต้องจัดการกับการล็อคและการปลดล็อคด้วยตนเอง

ความยืดหยุ่น
WaitGroup ใช้งานง่ายและสามารถใช้ใน
หลายสถานการณ์ เช่น การรอให้ goroutine ทั้งหมดเสร็จ
สิ้นก่อนที่จะปิดโปรแกรม หรือการรวบรวมผลลัพธ์จากหลาย
goroutine

ข้อจำกัด
ไม่มีการจัดการข้อผิดพลาด
WaitGroup ไม่สามารถส่งคืนข้อผิดพลาดจาก goroutine ได้โดยตรง
เราต้องจัดการข้อผิดพลาดด้วยวิธีอื่น เช่น การใช้ Channel หรือแพ็กเกจ
errgroup
