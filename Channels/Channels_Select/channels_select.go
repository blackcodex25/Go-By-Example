package main

import (
	f "fmt"
	"time"
)

/*
	การใช้คำสั่ง select ในภาษา Go

เป็นหนึ่งในความสามารถที่ทรงพลังของ Go ในการจัดการกับ
goroutines และ channels ที่ทำงานพร้อมกัน

คำอธิบายบทความ
การใช้ Select กับ Channels หลายตัว
select ใน Go อนุญาตให้คุณรอการทำงานของ
หลาย ๆ channel ได้พร้อมกัน ซึ่งเป็นการเพิ่ม
ประสิทธิภาพและความยืดหยุ่นในการจัดการกับการ

ตัวอย่างในบทความนี้จะแสดงวิธีการใช้ select เพื่อ
รอค่าจาก 2 channel พร้อมกัน

จำลองการทำงานที่ใช้เวลาต่างกัน:
โค้ดตัวอย่างนี้จำลองการทำงานที่ใช้เวลาต่างกัน โดย
ใช้ time.Sleep เพื่อสร้างความล่าช้าในการส่งค่าลง
ใน channel
Channel แรกจะได้รับค่าหลังจาก 1 วินาที และ
channel ที่สองจะได้รับค่าหลังจาก 2 วินาที

การใช้ Select เพื่อรอการรับค่า:
select จะรอการรับค่าจาก channel ใด channel
หนึ่ง เมื่อค่าถูกส่งเข้ามาใน channel หนึ่ง select จะ
ทำงานใน case ที่ตรงกับ channel นั้นและพิมพ์ค่าที่ได้
รับออกมา
เมื่อทั้งสอง channel ส่งค่ามาเสร็จสิ้น โค้ดนี้จะพิมพ์
ข้อความที่ได้รับออกมาในลำดับที่เกิดขึ้นจริง
*/
func main() {
	// var wg sync.WaitGroup
	c1 := make(chan string) // สร้าง channel ชื่อ c1 สำหรับค่า string
	c2 := make(chan string) // สร้าง channel ชื่อ c2 สำหรับค่า string
	// wg.Add(1)
	go func() {
		// defer wg.Wait()
		time.Sleep(1 * time.Second) // หน่วงเวลา 1 วิ
		c1 <- "one"                 // ส่งข้อความ "one" ลงใน channel c1
	}()

	go func() {
		// defer wg.Wait()
		time.Sleep(2 * time.Second) // หน่วงเวลา 2 วินาที
		c2 <- "two"                 // ส่งข้อความ "two" ลงใน channel c2
	}()

	// ใช้ select เพื่อรอรับค่าจากทั้งสอง channel
	for i := 0; i < 2; i++ {
		select {
		case msg1 := <-c1: // ถ้ามีค่ามาจาก channel c1 ให้ทำงานใน case นี้
			f.Println("received", msg1)
		case msg2 := <-c2: // ถ้ามีค่ามาจาก channel c2 ให้ทำงานใน case นี้
			f.Println("received", msg2)
		}
	}

}

/*Logic ของโค้ด
การสร้าง Channels:
โค้ดนี้เริ่มต้นด้วยการสร้าง channels สองตัว คือ c1
และ c2 ซึ่งเป็น channel สำหรับการส่งข้อมูลแบบ
string

การสร้าง Goroutines:
มีการสร้าง goroutine สองตัวเพื่อจำลองการทำงานที่
ใช้เวลาต่างกัน
Goroutine แรกจะหน่วงเวลา 1 วินาทีแล้วส่งข้อความ
"one" ลงใน channel c1
Goroutine ที่สองจะหน่วงเวลา 2 วินาทีแล้วส่ง
ข้อความ "two" ลงใน channel c2

การใช้ Select เพื่อรอค่าจาก Channels:
โค้ดใช้ select ในการรอการรับค่าจาก channel ทั้งสอง
เมื่อค่าถูกส่งมาจาก channel c1 หรือ c2
select จะทำงานใน case ที่ตรงกับ channel นั้น
และพิมพ์ข้อความที่ได้รับออกมา
กระบวนการนี้จะวนซ้ำสองครั้ง (for loop ทำงาน 2 ครั้ง)
เพื่อให้แน่ใจว่าค่าจากทั้งสอง channel ได้ถูกรับ
และพิมพ์ออกมาทั้งหมด
*/
/*การทำงานของโค้ด
เมื่อโค้ดนี้รัน Goroutine แรกจะส่งข้อความ "one" ลงใน
channel c1 หลังจาก 1 วินาที และ Goroutine ที่สองจะ
ส่งข้อความ "two" ลงใน channel c2 หลังจาก 2 วินาที

select จะรอรับค่าจาก channel ใด channel หนึ่งก่อน
แล้วพิมพ์ค่าที่ได้รับ

ในการรันครั้งแรก select จะพิมพ์ "received one"
เนื่องจากค่าจาก c1 มาถึงก่อน

ในการรันครั้งที่สอง select จะพิมพ์ "received two"
เนื่องจากค่าจาก c2 มาถึงหลังจากนั้น 1 วินาที

เวลารวมของการรันโค้ดนี้ประมาณ 2 วินาที เพราะ
goroutines ทั้งสองทำงานพร้อมกัน
*/
