ใน Go, time และ ticker เป็นส่วนหนึ่งของแพ็คเกจ time
ที่ใช้จัดการเกี่ยวกับเวลาและการตั้งเวลา (timing และ scheduling)
โดยสามารถใช้ในการกำหนดการทำงานในอนาคตหรือทำซ้ำอย่างต่อเนื่อง
ที่ช่วงเวลาที่กำหนด

Time
time ใน Go ใช้สำหรับการจัดการเวลา เช่น การหน่วงเวลา
(sleep), การนับเวลา (timing), หรือการจัดการกับเวลา
(time operations) ต่างๆ เช่น การสร้าง timer หรือ
ticker ในกรณีที่ต้องการรอเวลาในอนาคตหรือต้องการทำงานซ้ำ
ที่ช่วงเวลาที่กำหนด

time.Sleep(duration): ฟังก์ชันนี้ใช้ในการหน่วงเวลาการ
ทำงาน โดยโปรแกรมจะหยุดทำงานเป็นระยะเวลาที่กำหนด
ไว้ เช่น time.Sleep(2 * time.Second) จะหยุดการ
ทำงานเป็นเวลา 2 วินาที
time.Now(): ใช้ในการรับค่าเวลาปัจจุบัน

Timer
Timer ใน Go เป็นโครงสร้างที่ใช้ในการรอเหตุการณ์ที่กำหนด
ไว้ในอนาคต เช่น รอเป็นเวลา 2 วินาทีแล้วทำอะไรบางอย่างเมื่อถึงเวลา
time.NewTimer(duration): ใช้ในการสร้าง Timer
โดยที่ duration คือระยะเวลาที่ต้องการรอ เช่น
time.NewTimer(2 * time.Second) จะสร้าง Timer ที่
จะรอเป็นเวลา 2 วินาที
timer.C: เป็น channel ที่ใช้ในการรับสัญญาณเมื่อ
Timer หมดเวลา
timer.Stop(): ใช้ในการหยุด Timer ก่อนที่มันจะหมด
เวลา ซึ่งจะทำให้ Timer ไม่ส่งสัญญาณใดๆ ไปยัง
channel C

ตัวอย่างการใช้งาน Timer:
timer := time.NewTimer(2 * time.Second)
<-timer.C  // รอจนกว่า Timer จะหมดเวลาและส่งสัญญาณผ่าน channel
fmt.Println("Timer fired")

Ticker
Ticker ใช้สำหรับการทำงานซ้ำที่ช่วงเวลาที่กำหนด โดยมันจะ
ส่งสัญญาณไปยัง channel ทุกครั้งที่ถึงช่วงเวลาที่กำหนดไว้
time.NewTicker(duration): ใช้ในการสร้าง Ticker
โดยที่ duration คือระยะเวลาระหว่างแต่ละ tick เช่น
time.NewTicker(500 * time.Millisecond) จะสร้าง
Ticker ที่ส่งสัญญาณทุก ๆ 500 มิลลิวินาที

ticker.C: เป็น channel ที่ใช้รับสัญญาณ tick 
ทุกครั้งที่ถึงเวลาที่กำหนด

ticker.Stop(): ใช้ในการหยุด Ticker ซึ่ง
จะทำให้มันหยุดส่งสัญญาณไปยัง channel

ตัวอย่างการใช้งาน Ticker:
ticker := time.NewTicker(500 * time.Millisecond)

go func() {
    for t := range ticker.C {  // รอรับค่าจาก channel ของ Ticker
        fmt.Println("Tick at", t)
    }
}()

time.Sleep(1600 * time.Millisecond)
ticker.Stop()
fmt.Println("Ticker stopped")

สรุป
Timer เหมาะสำหรับงานที่ต้องการรอคอยจนถึงเวลาที่กำหนดในอนาคตเพียงครั้งเดียว
Ticker เหมาะสำหรับงานที่ต้องการทำซ้ำเป็นช่วงเวลาที่กำหนด

ทั้ง Timer และ Ticker จะใช้ channel ในการส่งสัญญาณ
เมื่อถึงเวลา หรือเมื่อเกิดเหตุการณ์ตามที่กำหนดไว้ ทำให้เรา
สามารถใช้ select ในการเลือกทำงานตามสัญญาณเหล่านั้นได้
อย่างสะดวก