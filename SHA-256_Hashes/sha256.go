package main

import (
	"crypto/sha256" // สำหรับใช้งานฟังก์ชันในการคำนวณค่า SHA-256 hash
	"fmt"
)

/* บทความนี้อธิบายเกี่ยวกับ SHA-256 Hashes ซึ่งใช้ในการสร้างค่าแฮชที่มีขนาดสั้น
สำหรับข้อมูล เช่น ไฟล์ binary หรือ text ซึ่งการใช้งานทั่วไปคือการยืนยันตัวตนของ
ข้อมูลที่ถูกส่งผ่าน โดยในกรณีของ TLS/SSL certificates จะใช้ SHA-256 เพื่อสร้าง
ลายเซ็นของใบรับรอง (certificate's signature)

สรุปเนื้อหาสำคัญ:
SHA-256 เป็นฟังก์ชันแฮชที่ใช้เพื่อคำนวณค่าแฮชของข้อมูล (binary หรือ text)
Go มีการสนับสนุนการคำนวณค่าแฮชหลายแบบ ซึ่งหนึ่งในนั้นคือ SHA-256
การใช้ SHA-256 ใน Go สามารถทำได้โดยการเริ่มต้นสร้างแฮชใหม่ (sha256.New())
เขียนข้อมูลในรูปแบบ byte ลงไป และดึงค่าผลลัพธ์แฮชออกมาในรูปแบบ byte slice
ผลลัพธ์ที่ได้จากการคำนวณจะถูกพิมพ์ในรูปแบบ ฐาน 16 (hexadecimal)
รูปแบบการคำนวณแฮชแบบอื่น เช่น SHA-512 ก็สามารถทำได้ในลักษณะเดียวกัน
โดยใช้ไลบรารี crypto/sha256
*/
// หลักการทำงานของโค้ด:
func main() {
	s := "sha256 this string" // ข้อความที่ต้องการคำนวณค่าแฮช
	h := sha256.New()         // สร้างแฮซใหม่โดยใช้ฟังก์ชัน sha256
	h.Write([]byte(s))        // เขียนข้อมูลในรูปแบบ byte (แปลง string เป็น byte)
	bs := h.Sum(nil)          // สร้างค่าผลลัพธ์แฮชในรูปแบบ byte slice

	fmt.Println(s)         // พิมพ์ข้อความต้นฉบับ
	fmt.Printf("%x\n", bs) // พิมพ์ผลลัพธ์แฮชในรูปแบบฐาน 16 (hex)
}

/* อธิบายหลักการทำงานโค้ด:
1.ข้อความ "sha256 this string" จะถูกเก็บในตัวแปร s ซึ่งเป็นข้อมูลต้นทางที่ต้อง
การคำนวณค่าแฮช
2.สร้างออบเจกต์ใหม่สำหรับการคำนวณ SHA-256 โดยใช้ฟังก์ชัน sha256.New()
3.เขียนข้อมูลลงในแฮชด้วยฟังก์ชัน h.Write([]byte(s)) โดยทำการแปลง string s
เป็น byte slice ([byte])
4.เรียกใช้ h.Sum(nil) เพื่อสร้างค่าผลลัพธ์แฮชในรูปแบบ byte slice (bs)
5.ข้อมูลต้นฉบับและผลลัพธ์แฮชที่ได้จะถูกพิมพ์ออกมา โดยค่าผลลัพธ์แฮชจะแสดงในรูป
แบบฐาน 16 (hexadecimal)
โค้ดนี้เป็นตัวอย่างที่แสดงให้เห็นถึงวิธีการคำนวณค่าแฮชโดยใช้ SHA-256 ในภาษา Go
และวิธีการแปลงข้อมูลให้สามารถถูกจัดเก็บในรูปแบบที่ใช้งานได้ในระบบ
*/
/* โค้ดด้านบนเป็นตัวอย่างของการคำนวณค่า SHA-256 hash สำหรับสตริงในภาษา Go
s := "sha256 this string"
ประกาศตัวแปร s ซึ่งเก็บค่าข้อความ "sha256 this string"
ข้อความนี้เป็นข้อมูลที่เราจะคำนวณค่า SHA-256 hash

h := sha256.New()
สร้างออบเจกต์ใหม่ h สำหรับการคำนวณ hash โดยใช้ฟังก์ชัน sha256.New()
ออบเจกต์นี้จะเป็นตัวช่วยให้เราสามารถคำนวณค่าแฮช SHA-256

h.Write([]byte(s))
ใช้ฟังก์ชัน h.Write() เพื่อเขียนข้อมูลลงในแฮช ข้อมูลที่เขียนคือ s ที่ถูกแปลงเป็น
byte slice ([byte](s)) การคำนวณค่าแฮชจะใช้ข้อมูลในรูปแบบ byte เสมอ
ดังนั้นเราต้องแปลง string ให้เป็น byte slice ก่อน

bs := h.Sum(nil)
คำนวณค่าแฮชสุดท้ายและเก็บไว้ในตัวแปร bs ฟังก์ชัน h.Sum(nil) จะทำการคืนค่า
byte slice ของแฮชที่คำนวณได้ การส่งค่า nil ในฟังก์ชันนี้หมายถึงเราไม่ต้องการ
ต่อค่าใดๆ เข้ากับผลลัพธ์ที่ได้จากแฮช

fmt.Println(s)
พิมพ์ค่าของตัวแปร s ซึ่งคือข้อความ "sha256 this string" นี่คือข้อมูลที่เรานำ
ไปคำนวณแฮช

fmt.Printf("%x\n", bs)
พิมพ์ผลลัพธ์แฮชที่ถูกเก็บในตัวแปร bs โดยใช้ %x จะบอกให้ Printf แสดงผลลัพธ์
ในรูปแบบฐาน 16 (hexadecimal) ผลลัพธ์จะเป็นตัวเลขฐาน 16 ที่สอดคล้องกับค่าแฮช
SHA-256 ของข้อความที่ถูกคำนวณ
*/
/* สรุปการทำงาน
โค้ดนี้ทำหน้าที่คำนวณค่า SHA-256 hash ของข้อคาม "sha256 this string"
โดยขั้นแรกจะสร้างออบเจกต์สำหรับการคำนวณแฮช เขียนข้อมูลเข้าไปในแฮช
แล้วดึงค่าผลลัพธ์แฮชออกมาในรูปแบบ byte slice และแสดงผลในรูปแบบฐาน 16 (hexadecimal)
เพื่อให้อ่านง่าย
*/
