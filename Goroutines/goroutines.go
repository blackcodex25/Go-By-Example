package main

import (
	"fmt"
	"sync"
)

/*
goroutine ซึ่งเป็นหนึ่งในจุดเด่นของภาษา Go
ที่ช่วยให้เราสามารถสร้าง thread ของการทำงานที่เบาและมี
ประสิทธิภาพสูง โค้ดและเนื้อหานี้อธิบายการใช้งาน goroutine
และแสดงให้เห็นถึงการทำงานแบบ asynchronous โดยใช้โค้ด
ตัวอย่างง่ายๆ
*/
func f(from string) {
	for i := 0; i < 3; i++ {
		fmt.Println(from, ":", i)
	}
}
func main() {
	var wg sync.WaitGroup
	f("direct")

	wg.Add(2) // จำนวนที่ต้องหยุดของ Goroutines คือ 2
	go f("goroutine")
	wg.Done() // ทำงานเสร็จแล้ว ลดจำนวนที่ต้องหยุดรอ

	go func(msg string) {
		// defer wg.Done()
		wg.Done() // ทำงานเสร็จแล้ว ลดจำนวนที่ต้องหยุดรอ
		fmt.Println(msg)

	}("is")

	wg.Wait() // หยุดรอ Goroutine ให้เสร็จทั้งหมด
	fmt.Println("Here")
	// *การแก้ไข Deadlock Goroutines
	// เราต้องเรียก wg.Done() ในทุก goroutine ที่เพิ่มเข้ามา.
	// ใน WaitGroup เพื่อให้ wg.Wait() ทำงานได้ถูกต้อง
}

/*สรุปเนื้อหา
Goroutine: เป็น thread ที่เบาและสามารถดำเนินการพร้อมกัน
(concurrently) กับ thread อื่นๆ ในโปรแกรม

การเรียกฟังก์ชันแบบปกติ: เมื่อเรามีฟังก์ชัน f(s) ถ้าเรา
เรียกใช้ f(s) โดยตรงจะเป็นการทำงานแบบ synchronous
ซึ่งหมายความว่าโปรแกรมจะรอให้ f(s) ทำงานเสร็จก่อนจึง
จะดำเนินการต่อไป

การเรียกใช้ฟังก์ชันใน goroutine: ถ้าเราต้องการเรียกใช้
f(s) ใน goroutine ให้ใช้คำสั่ง go f(s) ซึ่งจะทำให้
ฟังก์ชัน f(s) ทำงานพร้อมกันกับโค้ดส่วนอื่นในโปรแกรม
ฟังก์ชันนิรนาม (Anonymous Function): นอกจากการเรียก
ฟังก์ชันที่มีชื่อได้ เราสามารถใช้ goroutine ร่วมกับฟังก์ชัน
นิรนามได้โดยใช้ go func() { ... }()

ผลลัพธ์ของโปรแกรม: เมื่อโปรแกรมทำงานจะเห็นว่าการเรียก
ใช้ฟังก์ชันแบบ synchronous จะแสดงผลลัพธ์ก่อน จากนั้น
ผลลัพธ์ของ goroutine จะถูกแสดงออกมา ผลลัพธ์อาจจะมี
การสลับกันขึ้นอยู่กับลำดับการทำงานของ goroutine
*/
/* การทำงานของโค้ด:
ฟังก์ชัน f: เป็นฟังก์ชันที่พิมพ์ข้อความพร้อมกับลูป for
เพื่อแสดงข้อความที่มีการนับเลขตั้งแต่ 0 ถึง 2
เรียกใช้ฟังก์ชัน f แบบปกติ: เรียกใช้ f("direct") แบบ
synchronous ซึ่งหมายความว่าฟังก์ชันนี้จะทำงานและพิมพ์
ข้อความก่อนที่จะดำเนินการต่อไป
เรียกใช้ฟังก์ชัน f ใน goroutine:ใช้ go
f("goroutine") เพื่อให้ฟังก์ชัน f ทำงานพร้อมกับโค้ดส่วนอื่นๆ
เรียกใช้ฟังก์ชันนิรนามใน goroutine: ใช้ go func(msg
string) { ... }("going") เพื่อสร้างและเรียกใช้ฟังก์ชัน
นิรนามที่พิมพ์ข้อความ "going" ออกมา
การหยุดพัก: ใช้ time.Sleep(time.Second) เพื่อให้
โปรแกรมหลักหยุดพักหนึ่งวินาทีเพื่อรอให้ goroutine ทั้งหมด
ทำงานเสร็จก่อนที่โปรแกรมจะสิ้นสุด
พิมพ์ข้อความ done: เมื่อ goroutine ทั้งหมดทำงานเสร็จ
โปรแกรมจะพิมพ์คำว่า done ออกมา
หมายเหตุ: การใช้ time.Sleep เป็นวิธีที่ง่ายในการรอให้
goroutine ทำงานเสร็จ แต่ในกรณีที่ซับซ้อนกว่านี้ ควรใช้
sync.WaitGroup หรือเครื่องมืออื่นๆ เพื่อจัดการการรอ goroutine อย่างถูกต้อง
*/
