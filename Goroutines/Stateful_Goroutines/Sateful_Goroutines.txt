Stateful Goroutines คือวิธีการหนึ่งในการจัดการสถานะ (state) ของ
ข้อมูลในโปรแกรม Go โดยไม่ต้องใช้ mutexes เพื่อหลีกเลี่ยงปัญหาการ
เข้าถึงข้อมูลพร้อมกันจากหลาย goroutines ซึ่งอาจทำให้ข้อมูลเสียหาย
หรือไม่ถูกต้อง

รายละเอียด
1.ความแตกต่างจากการใช้ Mutexes:
ในตัวอย่างก่อนหน้านี้ การใช้ mutexes จะทำให้หลาย
goroutines สามารถเข้าถึงและแก้ไขข้อมูลร่วมกันได้อย่างปลอดภัย
แต่การใช้ mutexes นั้นต้องอาศัยการล็อกและปลดล็อกทรัพยากรอย่างถูกต้อง

การใช้ Stateful Goroutines เป็นอีกทางเลือกหนึ่งที่ใช้หลักการ
การสื่อสารผ่าน channels โดยข้อมูลจะถูก "ครอบครอง" โดย goroutine หนึ่งตัว
ซึ่งจะทำให้แน่ใจได้ว่าไม่มีการ เข้าถึงข้อมูลพร้อมกันจากหลาย goroutines

2.การจัดการ State โดย Stateful Goroutines:
ข้อมูลที่ต้องการจัดการจะถูก "ครอบครอง" โดย goroutine
หนึ่งตัว ซึ่งเป็นผู้ดูแลข้อมูลนี้อย่างเฉพาะเจาะจง

goroutines อื่นๆ ที่ต้องการอ่านหรือเขียนข้อมูล จะต้องส่งข้อความ (request)
ไปยัง goroutine ที่ครอบครองข้อมูลนั้นและรอรับการตอบกลับ (response)

3.โครงสร้าง ReadOp และ WriteOp:
ข้อความที่ใช้สำหรับการอ่านและเขียนข้อมูล จะถูกสร้างขึ้นใน
รูปของ struct เช่น readOp และ writeOp

Struct เหล่านี้จะบรรจุข้อมูลที่ต้องการและช่องทางการตอบกลับ
(response channel) เพื่อให้ goroutine ที่ครอบครองข้อมูล
สามารถส่งค่ากลับไปให้ผู้ที่ร้องขอได้

4.ช่องทางสื่อสาร (Channels):
reads channel: สำหรับส่งคำร้องขออ่านข้อมูล
writes channel: สำหรับส่งคำร้องขอเขียนข้อมูล

5.การทำงานของ Goroutine ที่ครอบครอง State:
Goroutine ตัวนี้จะทำหน้าที่ "รอ" การร้องขอจากช่องทางต่างๆ
เช่น reads และ writes channels

เมื่อได้รับคำร้องขอ มันจะทำการอ่านหรือเขียนข้อมูลตามที่
ร้องขอ จากนั้นส่งผลลัพธ์กลับไปทาง response channel

6.การทดสอบ:
มีการสร้าง goroutines จำนวน 100 ตัวเพื่อทำการอ่านข้อมูล 
และ 10 ตัวเพื่อทำการเขียนข้อมูล

เมื่อเวลาผ่านไปหนึ่งวินาที Goroutines เหล่านี้จะหยุดทำงาน
และรายงานจำนวนครั้งของการอ่านและเขียนข้อมูลที่ทำได้

สรุป
การจัดการสถานะโดยใช้ Stateful Goroutines นั้นเป็นวิธีการที่
ทำให้ข้อมูลถูกควบคุมและจัดการโดย goroutine หนึ่งตัวเท่านั้น
ซึ่งจะช่วยหลีกเลี่ยงปัญหาการเข้าถึงข้อมูลพร้อมกันจากหลาย goroutines
ที่อาจทำให้ข้อมูลเสียหายหรือไม่ถูกต้อง วิธีนี้อาจจะซับซ้อนกว่าการใช้ mutexes
แต่ในบางกรณี เช่น เมื่อมีการจัดการหลายช่องทางหรือการจัดการ
mutexes หลายตัว วิธีนี้อาจจะเหมาะสมมากกว่า
