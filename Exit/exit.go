package main

import (
	"fmt"
	"os"
)

func main() {
	// กำหนดให้พิมพ์ "!" เมื่อโปรแกรมเสร็จสิ้น (defer)
	defer fmt.Println("!")

	// ออกจากโปรแกรมด้วยสถานะ 3
	os.Exit(3)
}

/* defer fmt.Println("!") */
/* การใช้ defer จะหมายความว่าเมื่อฟังก์ชัน main เสร็จสิ้น */
/* (หรือมีการ return) จะพิมพ์ข้อความ "!" ออกมา */
/* แต่ถ้าหากโปรแกรมเรียกใช้ os.Exit ฟังก์ชันนี้จะไม่ถูกเรียกใช้งาน */

/* เรียกใช้ os.Exit(3) */
/* โปรแกรมจะออกจากการทำงานทันทีโดยส่งรหัสสถานะ 3 */
/* รหัสสถานะ 3 สามารถใช้ระบุเหตุผลหรือสาเหตุที่โปรแกรมหยุดทำงานได้ */

/* การทดสอบโปรแกรม */
/* 1.ถ้าคุณรันโปรแกรมนี้ด้วยคำสั่ง go run exit.go จะพบว่ามีการออก */
/* จากโปรแกรมโดยไม่มีการพิมพ์ข้อความ "!" เนื่องจาก os.Exit(3) */
/* จะทำให้โปรแกรมหยุดทำงานทันที */
/* 2.หากเราสร้างโปรแกรมนี้เเป็น binary โดยใช้คำสั่ง go build exit.go */
/* และรันไฟล์ที่สร้างขึ้น */
/* รหัสสถานะที่ 3 จะถูกส่งกลับไปยังระบบปฏิบัติการ (OS) */
/* เราสามารถตรวจสอบรหัสสถานะที่ส่งกลับโดยใช้คำสั่งใน terminal */
/* เช่น echo $? หลังจากรันโปรแกรม ซึ่งจะแสดงผลเป็น 3 */

/* ข้อสังเกตเพิ่มเติม */
/* ใน Go รหัสสถานะของการออกจากโปรแกรมจะถูกจัดการด้วยฟังก์ชัน */
/* os.Exit โดยไม่สามารถใช้ค่าที่คืนจากฟังก์ชัน main เพื่อบอกสถานะการออกได้ */
/* การใช้ os.Exit เป็นวิธีการที่ตรงไปตรงมาในการหยุดการทำงาน */
/* ของโปรแกรมอย่างรวดเร็ว และให้ระบุสถานะการออกได้ชัดเจน */
