package main

import (
	f "fmt"
)

/*
	การใช้งาน Pointers ในภาษา Go

ภาษา Go สนับสนุนการใช้งาน pointers ซึ่งช่วยให้เรา
สามารถส่งค่าแบบอ้างอิงไปยังตัวแปรหรือโครงสร้างข้อมูลใน
โปรแกรมของเราได้ Pointers เป็นเครื่องมือที่ทรงพลังที่ช่วย
ให้การจัดการกับข้อมูลในหน่วยความจำมีความยืดหยุ่นและมี
ประสิทธิภาพมากขึ้น

คุณสมบัติและการใช้งาน Pointers
1.การส่งค่าผ่านตัวแปรปกติ (Pass by Value)
ฟังก์ชัน zeroval รับพารามิเตอร์เป็นชนิด int ปกติ
ซึ่งเมื่อมีการส่งอาร์กิวเมนต์เข้าไป จะเป็นการส่งค่าตัว
แปรโดยไม่ใช่การอ้างอิง (pass by value)ซึ่ง
ซึ่งหมายความว่าฟังก์ชันจะได้รับสำเนาของค่าตัวแปร
(copy) ที่ไม่ส่งผลต่อค่าตัวแปรเดิมในฟังก์ชันที่เรียก
ใช้

2.การส่งค่าผ่านตัวชี้ (Pass by reference)
ฟังก์ชัน zeroptr รับพารามิเตอร์เป็น pointer ของ int (*int)
ซึ่งหมายความว่าฟังก์ชันจะรับที่อยู่ของตัวแปร (address) และทำงานกับค่าที่อยู่ที่ตำแหน่ง
นั้นโดยตรง การเปลี่ยนแปลงค่าผ่าน pointer จะส่งผลต่อค่าของตัวแปรเดิมที่ถูกส่งเข้ามา

3.การอ้างกิงและ dereferencing
เครื่องหมาย & ใช้เพื่อรับที่อยู่ของตัวแปร (pointer to i)
เครื่องหมาย * ใช้ในการ dereference pointer ซึ่งหมายถึงการเข้าถึงค่าจริงที่อยู่ในที่อยู่
หน่วยความจำนั้น

4.ผลกระทบของการใช้ Pointers
ฟังก์ชัน zeroval ไม่สามารถเปลี่ยนแปลงค่าตัวแปร
i ใน main ได้เพราะทำงานกับสำเนาของค่า
ฟังก์ชัน zeroptr สามารถเปลี่ยนแปลงค่าตัวแปร i
ใน main ได้เพราะทำงานกับ pointer ที่อ้างอิง
ถึงที่อยู่ของ i โดยตรง
*/
func zeroval(ival int) {
	ival = 0
}

/* ฟังก์ชัน zeroval
ฟังก์ชัน zeroval รับพารามิเตอร์ ival เป็นชนิด int
ฟังก์ชันนี้จะพยายามเปลี่ยนค่า ival ให้เป็น 0 แต่
เนื่องจากเป็นการส่งค่าผ่านสำเนา (pass by value)
การเปลี่ยนแปลงนี้จะไม่ส่งผลต่อค่าจริงของตัวแปรที่ถูก
ส่งเข้ามา
*/

func zeroptr(iptr *int) {
	*iptr = 0
}

/* ฟังก์ชัน zeroptr รับพารามิเตอร์ iptr เป็น
pointer ของ int (*int)
ฟังก์ชันนี้จะทำการ dereference ค่า pointer และ
เปลี่ยนแปลงค่าที่ตำแหน่งนั้นเป็น 0 การเปลี่ยนแปลงนี้
จะส่งผลต่อค่าจริงของตัวแปรที่ pointer นี้อ้างอิงถึง
*/

func main() {
	// i ถูกกำหนดค่าเป็็น 1
	i := 1
	f.Println("initial:", i) // พิมพ์ค่าเริ่มต้นออกมา

	// เรียกใช้ฟังก์ชัน zeroval(i) จะส่งค่า i เป็นสำเนา
	// เข้าไปในฟังก์ชัน zeroval ซึ่งจะไม่ส่งผลต่อค่า i
	// ใน main ดังนั้นค่าของ i ยังคงเป็น 1
	zeroval(i)
	f.Println("zeroval:", i) // พิมพ์ผลลัพธ์ออกจอ

	// การเรียกใช้ zeroptr(&i) จะส่ง pointer ของ i เข้าไปในฟังก์ชัน zeroptr
	/* ฟังก์ชัน zeroptr จะทำการ dereference ค่าและเปลี่ยนแปลงค่าที่ตำแหน่งนั้น
	ให้เป็น 0 ซึ่งจะส่งผลให้ค่าของ i ใน main เปลี่ยนเป็น 0
	*/
	zeroptr(&i)
	f.Println("zeroptr:", i)

	f.Println("pointer:", &i) // พิมพ์ที่อยู่ของ i (pointer) ออกจอ
	// เพื่อแสดงที่อยู่ในหน่วยความจำ
}

/* สรุป
โค้ดนี้แสดงให้เห็นถึงการใช้งาน pointers ในภาษา Go ซึ่ง
ช่วยให้สามารถจัดการกับตัวแปรผ่านการอ้างอิง (reference)
ได้อย่างมีประสิทธิภาพ การเปลี่ยนแปลงค่าผ่าน pointer จะส่ง
ผลโดยตรงต่อค่าของตัวแปรที่อ้างอิงถึง ซึ่งเป็นการทำงานต่าง
จากการส่งค่าผ่านสำเนา (value) การใช้งาน pointers มี
ความสำคัญอย่างยิ่งในการพัฒนาโปรแกรมที่ต้องการ
ประสิทธิภาพและความยืดหยุ่นสูงในการจัดการข้อมูล
*/
