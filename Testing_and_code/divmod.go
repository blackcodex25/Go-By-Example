package testingandcode

/* ฟังก์ชัน DivMod เป็นฟังก์ชันที่คำนวณผลหาร (quotient) และเศษเหลือ
(remainder) ระหว่างจำนวนเต็มสองจำนวน (ตัวตั้ง dvdn และตัวหาร dvsr)
โดย ใช้วิธีการลบซ้ำ ๆ จนกว่าตัวตั้งจะน้อยกว่าตัวหาร
*/
func DivMod(dvdn, dvsr int) (q, r int) {
	r = dvdn        // เริ่มต้นโดยกำหนดให้ r เท่ากับตัวตั้ง (dividend)
	for r >= dvsr { // วนลูปตราบใดที่ r ยังคงมากกว่าหรือเท่ากับตัวหาร (divisor)
		q += 1       // เพิ่มค่า q ซึ่งเป็นตัวเก็บผลหารทุกครั้งที่ r ลดลง
		r = r - dvsr // ลบค่าตัวหาร dvsr ออกจาก r จนกว่า r จะน้อยกว่า dvsr
	}
	return // คืนค่า q (quotient) และ r (remainder) ออกไป
}

/*
*ตัวอย่างการทำงาน:
ถ้าเราเรียกใช้ DivMod(10, 3):
ค่า r จะถูกกำหนดเป็น 10 (ตัวตั้ง)
จะวนลูป 3 รอบ (เพราะ 10 - 3 - 3 - 3 ทำให้ r เหลือ 1)
ผลหาร q จะได้ค่าเป็น 3 (จำนวนครั้งที่ลบได้เต็ม) และเศษ r จะเป็น 1
(ตัวเลขที่เหลือจากการลบ)
ฟังก์ชันนี้คำนวณผลหารและเศษด้วยวิธีการลดทีละ dvsr ซึ่งเป็นวิธีที่ง่ายและตรง
ไปตรงมาในการคำนวณแบบ manual

*คำอธิบาย Logic:
*1.ค่าเริ่มต้น: ฟังก์ชันนี้รับตัวตั้ง (dvdn) และตัวหาร (dvsr) เป็นพารามิเตอร์
และคืนค่าผลหาร (q) และเศษเหลือ (r) เป็นผลลัพธ์ โดยเริ่มต้นกำหนดให้
r = dvdn หรือ r เป็นตัวตั้ง
*2.ลูปการลบซ้ำ: ลูป for ทำงานตราบใดที่ค่าของ r (ตัวตั้งที่ถูกลดทีละ
dvsr) ยังมีค่ามากกว่าหรือเท่ากับตัวหาร dvsr:
ในแต่ละรอบของลูป ค่าของ q (ผลหาร) จะเพิ่มขึ้นทีละ 1 เพื่อสะสม
จำนวนครั้งที่ r ถูกลบ
ค่าของ r จะถูกลดลงด้วยตัวหาร dvsr ทีละรอบ จนกว่าค่าของ r จะ
น้อยกว่า dvsr
*3.จบการทำงาน:
เมื่อ r น้อยกว่าตัวหาร dvsr ลูปจะหยุดทำงานและฟังก์ชัน
จะคืนค่า q ซึ่งเป็นจำนวนครั้งที่ตัวตั้งถูกลบออกทีละ dvsr (นั่นคือผลหาร)
และค่า r ซึ่งเป็นเศษที่เหลือหลังจากลบไปจนถึงจุดที่ไม่สามารถลบได้อีก
*/
